AWSTemplateFormatVersion: '2010-09-09'
Description: Secure Serverless File Upload Infrastructure (Presigned POST)

Parameters:
  GitHubRepo:
    Type: String
    Description: 'GitHub repo in format "owner/repo"'

  GitHubAccessToken:
    Type: String
    NoEcho: true
    Description: 'GitHub token with repo + admin:repo_hook'

  UploadPassword:
    Type: String
    NoEcho: true
    Description: 'Password for uploads'

  S3BucketName:
    Type: String
    Description: 'Bucket name for file storage'

  LambdaCodeBucket:
    Type: String
    Description: 'S3 bucket with lambda.zip'

  LambdaCodeKey:
    Type: String
    Description: 'S3 key for lambda.zip'

  CompanyName:
    Type: String
    Default: "AI Guru"
    Description: 'Displayed in UI'

  CustomDomainName:
    Type: String
    Description: 'Custom domain name (e.g., yourdomain.com)'

  CustomDomainPrefix:
    Type: String
    Default: "fileupload"
    Description: 'Subdomain prefix (e.g., fileupload)'

Resources:
  # S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref S3BucketName
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            # For presigned POST we only need POST + GET, but you can keep PUT, DELETE, etc. if you wish
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000

  # Lambda execution role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${S3BucketName}
                  - !Sub arn:aws:s3:::${S3BucketName}/*

  # Lambda function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${CustomDomainPrefix}Lambda"
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref LambdaCodeKey
      Environment:
        Variables:
          UPLOAD_PASSWORD: !Ref UploadPassword
          UPLOAD_BUCKET: !Ref S3BucketName  # <-- Updated to match the code
      Timeout: 30
      MemorySize: 256

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: FileUploadAPI
      EndpointConfiguration:
        Types: [REGIONAL]

  # /upload resource
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: upload

  # POST /upload method
  ApiMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: LambdaFunction
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # OPTIONS /upload method for CORS preflight
  ApiOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
            ResponseTemplates:
              application/json: '{}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # Lambda permission for /upload
  LambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: [LambdaFunction, ApiGateway]
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/upload

  # Deploy the API
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiMethod
      - ApiOptionsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

  # Amplify Role
  AmplifyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: amplify.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess-Amplify

  # Amplify App
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: FileUploadApp
      Repository: !Ref GitHubRepo
      AccessToken: !Ref GitHubAccessToken
      IAMServiceRole: !GetAtt AmplifyRole.Arn
      BuildSpec: |
        version: 1
        frontend:
          phases:
            preBuild:
              commands:
                - find . -name "*.html" -exec sed -i "s|%%API_URL%%|$API_URL|g" {} +
                - find . -name "*.html" -exec sed -i "s|%%COMPANY_NAME%%|$COMPANY_NAME|g" {} +
            build:
              commands:
                - echo "Static site - no build step needed"
          artifacts:
            baseDirectory: .
            files:
              - '**/*'
          cache:
            paths:
              - node_modules/**/*
      EnvironmentVariables:
        - Name: API_URL
          Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/upload'
        - Name: COMPANY_NAME
          Value: !Ref CompanyName

  # Amplify Branch
  AmplifyBranch:
    Type: AWS::Amplify::Branch
    DependsOn: AmplifyApp
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: main
      EnableAutoBuild: true

  # Custom Domain (Optional)
  AmplifyDomain:
    Type: AWS::Amplify::Domain
    DependsOn: [AmplifyApp, AmplifyBranch]
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      DomainName: !Ref CustomDomainName
      SubDomainSettings:
        - Prefix: !Ref CustomDomainPrefix
          BranchName: main

  # Route53 record (Optional)
  AmplifySubdomainRecord:
    Type: AWS::Route53::RecordSet
    DependsOn: AmplifyDomain
    Properties:
      HostedZoneName: !Sub "${CustomDomainName}."
      Name: !Sub "${CustomDomainPrefix}.${CustomDomainName}"
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !Sub "main.${AmplifyApp.DefaultDomain}"

Outputs:
  AppUrl:
    Value: !Sub 'https://${CustomDomainPrefix}.${CustomDomainName}'
  ApiEndpoint:
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/upload'
  S3Bucket:
    Value: !Ref S3BucketName
